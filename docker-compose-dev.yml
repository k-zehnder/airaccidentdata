services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app # Mounts the host frontend directory to /app in the container
      - /app/node_modules # An anonymous volume to prevent overwriting node_modules from the container
    ports:
      - 3000:3000
    env_file:
      - .env
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    volumes:
      - ./backend:/app # Mounts the host backend directory to /app in the container
    ports:
      - 8080:8080
    env_file:
      - .env
    depends_on:
      - mysql

  aircraft_scraper:
    build:
      context: ./aircraft_scraper
      dockerfile: Dockerfile.dev
    volumes:
      - ./aircraft_scraper:/app # Mounts the host scraper directory to /app in the container
      - /app/node_modules # An anonymous volume to prevent overwriting node_modules from the container
    depends_on:
      - mysql
    env_file:
      - .env

  mysql:
    image: mysql:latest
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'mysqladmin ping -h localhost -uroot -p$${MYSQL_ROOT_PASSWORD}',
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - 3306:3306
    volumes:
      - mysql_airaccidentdata_dev:/var/lib/mysql # Persistent volume for MySQL data
    env_file:
      - .env

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/development.conf:/etc/nginx/nginx.conf # Mounts the host file to the container
    ports:
      - 80:80
    depends_on:
      - frontend
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
    ports:
      - 9200:9200
    volumes:
      - esdata:/usr/share/elasticsearch/data

volumes:
  mysql_airaccidentdata_dev:
    driver: local
  esdata:
    driver: local
